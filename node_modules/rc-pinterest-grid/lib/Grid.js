"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resize_observer_polyfill_1 = require("resize-observer-polyfill");
const React = require("react");
const layout_1 = require("./layout");
// as for now, ResizeObserver is only supported in chrome
// in other browser, we need polyfill.
const ResizeObserver = window.ResizeObserver || resize_observer_polyfill_1.default;
const INITIAL_HEIGHT = 500;
const CSS_TRANSITION = 'left 500ms cubic-bezier(0.215, 0.61, 0.355, 1) 0s,' +
    'top 700ms cubic-bezier(0.215, 0.61, 0.355, 1) 0s';
const DEFAULT_COLUMNS = 4;
const DEFAULT_COLUMN_WIDTH = 200;
const DEFAULT_GUTTER = 10;
class PinterestGrid extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.wrappedRefs = [];
        this.state = {
            positions: [],
            wrappedItems: [],
            gridWidth: 0,
            gridHeight: 0,
        };
        this.resizeObserver = new ResizeObserver((entries) => {
            this.doLayout();
        });
        this.observeChildren = () => {
            const container = this.refs.container;
            let len = 0;
            if (container && container.children && container.children.length) {
                len = container.children.length;
            }
            for (let i = 0; i < len; i++) {
                this.resizeObserver.observe(container.children[i]);
            }
        };
        this.unobserveChildren = () => {
            const container = this.refs.container;
            let len = 0;
            if (container && container.children && container.children.length) {
                len = container.children.length;
            }
            for (let i = 0; i < len; i++) {
                this.resizeObserver.unobserve(container.children[i]);
            }
            this.resizeObserver.disconnect();
        };
        this.createWrappedItems = (children) => {
            this.wrappedRefs = [];
            const items = React.Children.toArray(children);
            if (!Array.isArray(items)) {
                return [];
            }
            const wrappedItems = items.map((item, index) => {
                return (React.createElement("div", { key: item.key || `pinterest-${index}` }, item));
            });
            return wrappedItems;
        };
        this.doLayout = (wrappedItems) => {
            const { columnWidth, gutterWidth, gutterHeight, columns } = this.props;
            const container = this.refs.container;
            let nextWrappedItems = this.state.wrappedItems;
            if (Array.isArray(wrappedItems)) {
                nextWrappedItems = wrappedItems;
            }
            const itemHeights = nextWrappedItems.map((item, index) => {
                if (container && container.children && container.children[index]) {
                    return container.children[index].clientHeight;
                }
                return INITIAL_HEIGHT;
            });
            this.setState(Object.assign({ wrappedItems: nextWrappedItems }, layout_1.default(itemHeights, { columnWidth, gutterWidth, gutterHeight, columns })));
        };
    }
    componentWillMount() {
        const { children } = this.props;
        const wrappedItems = this.createWrappedItems(children);
        this.doLayout(wrappedItems);
    }
    componentDidMount() {
        this.observeChildren();
    }
    componentDidUpdate(prevProps) {
        const { columnWidth, gutterWidth, gutterHeight, columns, children } = this.props;
        // children list count change
        if (children !== prevProps.children) {
            const wrappedItems = this.createWrappedItems(children);
            this.doLayout(wrappedItems);
            setTimeout(this.observeChildren);
        }
        if (columnWidth !== prevProps.columnWidth ||
            gutterHeight !== prevProps.gutterHeight ||
            gutterWidth !== prevProps.gutterWidth ||
            columns !== prevProps.columns) {
            this.doLayout();
        }
    }
    componentWillUnmount() {
        this.unobserveChildren();
    }
    render() {
        const { gridWidth, gridHeight, positions, wrappedItems } = this.state;
        const { columnWidth, style, className } = this.props;
        return (React.createElement("div", { style: Object.assign({}, style, { position: 'relative', width: gridWidth, height: gridHeight, boxSizing: 'content-box' }), className: className, ref: "container" }, wrappedItems.map((item, index) => {
            return React.cloneElement(item, {
                style: {
                    position: 'absolute',
                    left: positions[index][0],
                    top: positions[index][1],
                    width: columnWidth,
                    transition: CSS_TRANSITION,
                    boxSizing: 'border-box',
                }
            });
        })));
    }
}
PinterestGrid.defaultProps = {
    columns: DEFAULT_COLUMNS,
    columnWidth: DEFAULT_COLUMN_WIDTH,
    gutterWidth: DEFAULT_GUTTER,
    gutterHeight: DEFAULT_GUTTER,
};
exports.default = PinterestGrid;
