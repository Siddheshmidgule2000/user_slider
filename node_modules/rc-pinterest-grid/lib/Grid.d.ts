import * as React from 'react';
import { Position } from './layout';
export interface BreakPoint {
    minScreenWidth: number;
    maxScreenWidth: number;
    columnWidth: number;
    columns: number;
}
export interface PinterestGridProps {
    columnWidth: number;
    columns: number;
    gutterWidth: number;
    gutterHeight: number;
    responsive?: boolean | ResponsiveConfigObject;
    style?: React.CSSProperties;
    className?: string;
    children?: React.ReactChildren;
}
export interface ResponsiveConfigObject {
    minPadding?: number;
    maxWidth?: number;
    customBreakPoints?: BreakPoint[];
}
interface PinterestGridState {
    positions: Position[];
    wrappedItems: any[];
    gridWidth: number;
    gridHeight: number;
}
export default class PinterestGrid extends React.PureComponent<PinterestGridProps, PinterestGridState> {
    static defaultProps: {
        columns: number;
        columnWidth: number;
        gutterWidth: number;
        gutterHeight: number;
    };
    wrappedRefs: any[];
    state: {
        positions: never[];
        wrappedItems: never[];
        gridWidth: number;
        gridHeight: number;
    };
    private resizeObserver;
    componentWillMount(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: PinterestGridProps): void;
    componentWillUnmount(): void;
    observeChildren: () => void;
    unobserveChildren: () => void;
    createWrappedItems: (children: React.ReactChildren) => any[];
    doLayout: (wrappedItems?: any[] | undefined) => void;
    render(): JSX.Element;
}
export {};
